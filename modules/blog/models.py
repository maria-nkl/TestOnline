from django.db import models
from django.core.validators import FileExtensionValidator
from django.contrib.auth import get_user_model
from django.urls import reverse
from taggit.managers import TaggableManager
from django_ckeditor_5.fields import CKEditor5Field

from mptt.models import MPTTModel, TreeForeignKey

from modules.services.utils import unique_slugify
import os
from django.core.exceptions import ValidationError

User = get_user_model()


class Article(models.Model):
    """
    –ú–æ–¥–µ–ª—å –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–∞–π—Ç–∞
    """    

    class ArticleManager(models.Manager):
        """
        –ö–∞—Å—Ç–æ–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –º–æ–¥–µ–ª–∏ —Å—Ç–∞—Ç–µ–π
        """

        def all(self):
            """
            –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π (SQL –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π)
            """
            return self.get_queryset().select_related('author', 'category').filter(status='published')

        def detail(self):
            """
            –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è (SQL –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å—Ç–∞—Ç—å—ë–π)
            """
            return self.get_queryset()\
                .select_related('author', 'category')\
                .prefetch_related('comments', 'comments__author', 'comments__author__profile', 'tags')\
                .filter(status='published')

    STATUS_OPTIONS = (
        ('published', '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'), 
        ('draft', '–ß–µ—Ä–Ω–æ–≤–∏–∫')
    )

    title = models.CharField(verbose_name='–ó–∞–≥–æ–ª–æ–≤–æ–∫', max_length=255)
    slug = models.SlugField(verbose_name='URL', max_length=255, blank=True, unique=True)
    short_description = CKEditor5Field(max_length=500, verbose_name='–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', config_name='extends')
    full_description = CKEditor5Field(verbose_name='–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', config_name='extends')
    thumbnail = models.ImageField(
        verbose_name='–ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞', 
        blank=True, 
        upload_to='images/thumbnails/%Y/%m/%d/', 
        validators=[FileExtensionValidator(allowed_extensions=('png', 'jpg', 'webp', 'jpeg', 'gif'))]
    )
    status = models.CharField(choices=STATUS_OPTIONS, default='published', verbose_name='–°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞', max_length=10)
    time_create = models.DateTimeField(auto_now_add=True, verbose_name='–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
    time_update = models.DateTimeField(auto_now=True, verbose_name='–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
    author = models.ForeignKey(to=User, verbose_name='–ê–≤—Ç–æ—Ä', on_delete=models.SET_DEFAULT, related_name='author_posts', default=1)
    updater = models.ForeignKey(to=User, verbose_name='–û–±–Ω–æ–≤–∏–ª', on_delete=models.SET_NULL, null=True, related_name='updater_posts', blank=True)
    fixed = models.BooleanField(verbose_name='–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ', default=False)
    category = TreeForeignKey('Category', on_delete=models.PROTECT, related_name='articles', verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
    objects = ArticleManager()
    tags = TaggableManager()

    class Meta:
        db_table = 'app_articles'
        ordering = ['-fixed', '-time_create']
        indexes = [models.Index(fields=['-fixed', '-time_create', 'status'])]
        verbose_name = '–°—Ç–∞—Ç—å—è'
        verbose_name_plural = '–°—Ç–∞—Ç—å–∏'

    def __str__(self):
        return self.title
    
    def get_absolute_url(self):
        return reverse('articles_detail', kwargs={'slug': self.slug})

    def save(self, *args, **kwargs):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if not self.slug:
            self.slug = unique_slugify(self, self.title)
        super().save(*args, **kwargs)


class Category(MPTTModel):
    """
    –ú–æ–¥–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é
    """
    title = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    slug = models.SlugField(max_length=255, verbose_name='URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', blank=True)
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', max_length=300)
    parent = TreeForeignKey(
        'self',
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        db_index=True,
        related_name='children',
        verbose_name='–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'
    )

    class MPTTMeta:
        """
        –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        """
        order_insertion_by = ('title',)

    class Meta:
        """
        –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏, —Ç–∞–±–ª–∏—Ü–∞ –≤ –¥–∞–Ω–Ω—ã–º–∏
        """
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'
        db_table = 'app_categories'

    def __str__(self):
        """
        –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∞—Ç—å–∏
        """
        return self.title
    
    def get_absolute_url(self):
        return reverse('articles_by_category', kwargs={'slug': self.slug})


class Comment(MPTTModel):
    """
    –ú–æ–¥–µ–ª—å –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    """

    STATUS_OPTIONS = (
        ('published', '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'),
        ('draft', '–ß–µ—Ä–Ω–æ–≤–∏–∫')
    )

    article = models.ForeignKey(Article, on_delete=models.CASCADE, verbose_name='–°—Ç–∞—Ç—å—è', related_name='comments')
    author = models.ForeignKey(User, verbose_name='–ê–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', on_delete=models.CASCADE, related_name='comments_author')
    content = models.TextField(verbose_name='–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', max_length=3000)
    time_create = models.DateTimeField(verbose_name='–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', auto_now_add=True)
    time_update = models.DateTimeField(verbose_name='–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', auto_now=True)
    status = models.CharField(choices=STATUS_OPTIONS, default='published', verbose_name='–°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞', max_length=10)
    parent = TreeForeignKey('self', verbose_name='–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', null=True, blank=True, related_name='children', on_delete=models.CASCADE)

    class MTTMeta:
        order_insertion_by = ('-time_create',)

    class Meta:
        db_table = 'app_comments'
        indexes = [models.Index(fields=['-time_create', 'time_update', 'status', 'parent'])]
        ordering = ['-time_create']
        verbose_name = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
        verbose_name_plural = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'

    def __str__(self):
        return f'{self.author}:{self.content}'


# modules/blog/models.py
import os
from django.db import models
from django.core.validators import FileExtensionValidator
from django.core.exceptions import ValidationError
from .image_processor import ImageProcessor
import logging

logger = logging.getLogger(__name__)

def validate_file_size(value):
    filesize = value.size
    if filesize > 10 * 1024 * 1024:
        raise ValidationError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ 10MB")

class ArticleFile(models.Model):
    article = models.ForeignKey('Article', on_delete=models.CASCADE, related_name='files')
    file = models.FileField(
        verbose_name='–§–∞–π–ª',
        upload_to='articles/files/%Y/%m/%d/',
        validators=[
            FileExtensionValidator(allowed_extensions=('jpg', 'jpeg', 'pdf')),
            validate_file_size
        ]
    )
    title = models.CharField(verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞', max_length=255, blank=True)
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏')
    is_active = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–Ω—ã–π')

    def save(self, *args, **kwargs):
        if not self.title:
            self.title = os.path.basename(self.file.name)
        super().save(*args, **kwargs)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if self.file.name.lower().endswith(('.jpg', '.jpeg')):
            self.process_image()

    def process_image(self):
        try:
            processor = ImageProcessor()
            results_text = processor.process_uploaded_image(self.file.path)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å (–∏—â–µ—Ç –ø–æ —ç–º–æ–¥–∑–∏-–º–∞—Ä–∫–µ—Ä—É)
            content = self.article.full_description
            if "## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤" in content:
                content = content.split("## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤")[0].strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —ç–º–æ–¥–∑–∏
            self.article.full_description = f"{content}\n\n{results_text}"
            self.article.save()
            
        except Exception as e:
            logger.error(f"üõë –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
    def get_file_type(self):
        ext = os.path.splitext(self.file.name)[1].lower()
        if ext in ['.jpg', '.jpeg']:
            return '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        elif ext == '.pdf':
            return 'PDF'
        return '–î—Ä—É–≥–æ–π'

    def __str__(self):
        return self.title or os.path.basename(self.file.name)